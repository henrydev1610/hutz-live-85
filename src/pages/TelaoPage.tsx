import React, { useState, useEffect, useRef, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import QRCode from 'qrcode.react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Slider } from "@/components/ui/slider"
import { useToast } from "@/hooks/use-toast";
import { Copy, Check, UserPlus, UserMinus, Loader2, X, Tv2, AlertTriangle } from "lucide-react";
import { generateSessionId, isSessionActive, createSession, endSession, getSessionParticipants, addParticipantToSession, updateParticipantStatus } from "@/utils/sessionUtils";
import ParticipantGrid from "@/components/live/ParticipantGrid";
import { setH264CodecPreference, initTelaoWebRTC, startScreenShare, stopScreenShare, setOnParticipantTrack, activeParticipants, cleanupWebRTC } from '@/utils/webrtc';
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog"
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from "@/components/ui/sheet"
import { Separator } from "@/components/ui/separator"
import { Badge } from "@/components/ui/badge";
import { supabase } from '@/integrations/supabase/client';

interface Participant {
  id: string;
  name: string;
  active: boolean;
  selected: boolean;
  hasVideo?: boolean;
  connectedAt?: number;
}

const TelaoPage = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const { sessionId: routeSessionId } = useParams<{ sessionId: string }>();
  const [sessionId, setSessionId] = useState(routeSessionId || '');
  const [newSessionId, setNewSessionId] = useState('');
  const [qrCode, setQrCode] = useState('');
  const [isLive, setIsLive] = useState(false);
  const [isStarting, setIsStarting] = useState(false);
  const [isStopping, setIsStopping] = useState(false);
  const [isScreenSharing, setIsScreenSharing] = useState(false);
  const [participantList, setParticipantList] = useState<Participant[]>([]);
  const [selectedParticipantId, setSelectedParticipantId] = useState<string | null>(null);
  const [broadcastChannel, setBroadcastChannel] = useState<BroadcastChannel | null>(null);
  const [screenShareStream, setScreenShareStream] = useState<MediaStream | null>(null);
  const [finalAction, setFinalAction] = useState<'redirect' | 'none'>('none');
  const [finalActionOpen, setFinalActionOpen] = useState(false);
  const [finalActionTimeLeft, setFinalActionTimeLeft] = useState(20);
  const [finalActionTimerId, setFinalActionTimerId] = useState<NodeJS.Timeout | null>(null);
  const [isH264Preferred, setIsH264Preferred] = useState(true);
  const [maxParticipants, setMaxParticipants] = useState<number>(6);
  const [supabaseChannel, setSupabaseChannel] = useState<any>(null);
  const [isSessionFull, setIsSessionFull] = useState(false);
  const [sessionCheckInterval, setSessionCheckInterval] = useState<NodeJS.Timeout | null>(null);
  const [sessionHeartbeatInterval, setSessionHeartbeatInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackInterval, setLocalStorageFallbackInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackTimeout, setLocalStorageFallbackTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackKey, setLocalStorageFallbackKey] = useState<string | null>(null);
  const [localStorageFallbackValue, setLocalStorageFallbackValue] = useState<string | null>(null);
  const [localStorageFallbackResponse, setLocalStorageFallbackResponse] = useState<string | null>(null);
  const [localStorageFallbackResponseTimeout, setLocalStorageFallbackResponseTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseKey, setLocalStorageFallbackResponseKey] = useState<string | null>(null);
  const [localStorageFallbackResponseValue, setLocalStorageFallbackResponseValue] = useState<string | null>(null);
  const [localStorageFallbackResponseInterval, setLocalStorageFallbackResponseInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheck, setLocalStorageFallbackResponseCheck] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckKey, setLocalStorageFallbackResponseCheckKey] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckValue, setLocalStorageFallbackResponseCheckValue] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckInterval, setLocalStorageFallbackResponseCheckInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckTimeout, setLocalStorageFallbackResponseCheckTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponse, setLocalStorageFallbackResponseCheckResponse] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeout, setLocalStorageFallbackResponseCheckResponseTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseKey, setLocalStorageFallbackResponseCheckResponseKey] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseValue, setLocalStorageFallbackResponseCheckResponseValue] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseInterval, setLocalStorageFallbackResponseCheckResponseInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutKey, setLocalStorageFallbackResponseCheckResponseTimeoutKey] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutValue, setLocalStorageFallbackResponseCheckResponseTimeoutValue] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutInterval, setLocalStorageFallbackResponseCheckResponseTimeoutInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutKey, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutKey] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutValue, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutValue] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutInterval, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutKey, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutKey] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutValue, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutValue] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutInterval, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutKey, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutKey] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutValue, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutValue] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutInterval, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutKey, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutKey] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutValue, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutValue] = useState<string | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutInterval, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutInterval] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutKeyTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutValueTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutIntervalTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);
  const [localStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout, setLocalStorageFallbackResponseCheckResponseTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeoutTimeout] = useState<NodeJS.Timeout | null>(null);

  // Handle participant join in a separate function
  const handleParticipantJoin = useCallback((participantId: string, name?: string) => {
    if (!participantId) return;
    
    // Check if the participant already exists
    setParticipantList(prev => {
      const existingParticipant = prev.find(p => p.id === participantId);
      if (existingParticipant) {
        // Update existing participant
        return prev.map(p => p.id === participantId ? {
          ...p,
          active: true, 
          name: name || p.name,
          connectedAt: Date.now()
        } : p);
      } else {
        // Add new participant, limit the total number if needed
        const newList = [
          ...prev,
          {
            id: participantId,
            name: name || `Participante ${prev.length + 1}`,
            active: true,
            selected: false,
            hasVideo: false,
            connectedAt: Date.now()
          }
        ];
        
        // Sort by most recently connected
        return newList.sort((a, b) => (b.connectedAt || 0) - (a.connectedAt || 0));
      }
    });
    
    // Register participant in storage
    addParticipantToSession(sessionId, participantId, name);
    
    toast({
      title: "Novo participante conectado",
      description: `${name || 'Um participante'} acabou de se conectar à sessão.`
    });
  }, [sessionId, toast]);

  // Setup WebRTC and session handling when sessionId changes
  useEffect(() => {
    if (!sessionId) return;
    
    try {
      // Create or join the session
      createSession(sessionId);
      
      // Initialize WebRTC for this session
      initTelaoWebRTC(sessionId, (participantId, track) => {
        console.log(`Received ${track.kind} track from participant ${participantId}`);
        
        if (track.kind === 'video') {
          // Mark participant as having video
          setParticipantList(prev => 
            prev.map(p => p.id === participantId ? { ...p, hasVideo: true } : p)
          );
        }
      });
      
      // Setup broadcast channel for session events
      const channel = new BroadcastChannel(`telao-session-${sessionId}`);
      setBroadcastChannel(channel);
      
      channel.onmessage = (event) => {
        const { data } = event;
        
        if (data.type === 'participant-join') {
          handleParticipantJoin(data.id, data.name);
        } 
        else if (data.type === 'participant-leave') {
          setParticipantList(prev => 
            prev.map(p => p.id === data.id ? { ...p, active: false } : p)
          );
          cleanupWebRTC(data.id);
        }
        else if (data.type === 'participant-update') {
          // Sync participants list when updates come in
          if (data.participants) {
            setParticipantList(data.participants);
          }
        }
      };
      
      // Load existing participants
      const existingParticipants = getSessionParticipants(sessionId);
      if (existingParticipants.length > 0) {
        setParticipantList(existingParticipants);
      }
      
      // Setup cleanup
      return () => {
        if (channel) {
          channel.close();
        }
        
        if (sessionCheckInterval) {
          clearInterval(sessionCheckInterval);
        }
        
        if (sessionHeartbeatInterval) {
          clearInterval(sessionHeartbeatInterval);
        }
        
        cleanupWebRTC();
      };
    } catch (error) {
      console.error("Error setting up session:", error);
      toast({
        title: "Erro ao iniciar sessão",
        description: "Não foi possível iniciar a sessão. Tente novamente.",
        variant: "destructive"
      });
    }
  }, [sessionId, toast, handleParticipantJoin]);

  // Handle final action timer
  useEffect(() => {
    if (finalActionOpen && finalActionTimeLeft > 0) {
      const timerId = window.setInterval(() => {
        setFinalActionTimeLeft((prev) => prev - 1);
      }, 1000);
      
      setFinalActionTimerId(timerId);
      
      return () => {
        if (timerId) clearInterval(timerId);
      };
    } else if (finalActionTimeLeft <= 0) {
      closeFinalAction();
    }
  }, [finalActionOpen, finalActionTimeLeft]);
  
  // Function to close the final action dialog
  const closeFinalAction = () => {
    if (finalActionTimerId) {
      clearInterval(finalActionTimerId);
    }
    
    setFinalActionOpen(false);
    
    if (finalAction === 'redirect') {
      navigate('/');
    }
  };
  
  // Handle selecting a participant
  const handleSelectParticipant = (id: string) => {
    setParticipantList(prev => 
      prev.map(p => ({
        ...p,
        selected: p.id === id ? !p.selected : p.selected
      }))
    );
    
    updateParticipantStatus(sessionId, id, { selected: true });
  };
  
  // Handle removing a participant
  const handleRemoveParticipant = (id: string) => {
    // First clean up WebRTC connections
    cleanupWebRTC(id);
    
    // Then update the UI
    setParticipantList(prev => prev.filter(p => p.id !== id));
    
    // Notify through broadcast channel (if supported)
    if (broadcastChannel) {
      broadcastChannel.postMessage({
        type: 'participant-remove',
        id: id,
        timestamp: Date.now()
      });
    }
  };
  
  // Generate a new session
  const startNewSession = () => {
    const newId = generateSessionId();
    setSessionId(newId);
    setIsLive(true);
    
    navigate(`/live/${newId}`);
    
    // Generate QR code for the participant link
    const participantURL = `${window.location.origin}/participant/${newId}`;
    setQrCode(participantURL);
    
    toast({
      title: "Nova sessão iniciada",
      description: "Compartilhe o QR Code com os participantes."
    });
  };
  
  // End the current session
  const endCurrentSession = () => {
    setIsStopping(true);
    
    // Clean up WebRTC connections
    cleanupWebRTC();
    
    // End the session in storage
    endSession(sessionId);
    
    setIsLive(false);
    setIsStopping(false);
    setSessionId('');
    setParticipantList([]);
    
    // Set final action to redirect
    setFinalAction('redirect');
    setFinalActionOpen(true);
    
    toast({
      title: "Sessão encerrada",
      description: "A sessão foi encerrada com sucesso."
    });
  };

  return (
    <div className="container max-w-screen-lg mx-auto py-6 px-4 space-y-8">
      <header className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">Telão ao Vivo</h1>
          <p className="text-muted-foreground">Conecte participantes e visualize suas câmeras em tempo real</p>
        </div>
        
        <div className="flex items-center gap-2">
          {isLive ? (
            <AlertDialog>
              <AlertDialogTrigger asChild>
                <Button 
                  variant="destructive" 
                  disabled={isStopping}
                >
                  {isStopping ? (
                    <>
                      <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                      Encerrando...
                    </>
                  ) : (
                    <>
                      <X className="h-4 w-4 mr-2" />
                      Encerrar Sessão
                    </>
                  )}
                </Button>
              </AlertDialogTrigger>
              <AlertDialogContent>
                <AlertDialogHeader>
                  <AlertDialogTitle>Encerrar sessão ao vivo?</AlertDialogTitle>
                  <AlertDialogDescription>
                    Isso desconectará todos os participantes. Esta ação não pode ser desfeita.
                  </AlertDialogDescription>
                </AlertDialogHeader>
                <AlertDialogFooter>
                  <AlertDialogCancel>Cancelar</AlertDialogCancel>
                  <AlertDialogAction onClick={endCurrentSession}>
                    Encerrar Sessão
                  </AlertDialogAction>
                </AlertDialogFooter>
              </AlertDialogContent>
            </AlertDialog>
          ) : (
            <Button 
              onClick={startNewSession} 
              disabled={isStarting}
            >
              {isStarting ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Iniciando...
                </>
              ) : (
                <>
                  <Tv2 className="h-4 w-4 mr-2" />
                  Iniciar Nova Sessão
                </>
              )}
            </Button>
          )}
        </div>
      </header>

      <Separator />

      {!isLive ? (
        <div className="py-12 text-center">
          <div className="max-w-md mx-auto">
            <h2 className="text-xl font-medium mb-2">Nenhuma sessão ativa</h2>
            <p className="text-muted-foreground mb-6">
              Inicie uma nova sessão para conectar participantes e visualizar suas câmeras em tempo real.
            </p>
            <Button onClick={startNewSession}>
              <Tv2 className="h-4 w-4 mr-2" />
              Iniciar Nova Sessão
            </Button>
          </div>
        </div>
      ) : (
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
          <div className="lg:col-span-2">
            <Card className="overflow-hidden">
              <CardContent className="p-6">
                {qrCode ? (
                  <div className="text-center">
                    <div className="bg-white p-4 mb-4 inline-block rounded-lg">
                      <QRCode value={qrCode} size={180} />
                    </div>
                    <div className="space-y-4">
                      <div>
                        <p className="text-sm font-medium mb-1">Link para participantes:</p>
                        <div className="flex items-center gap-2">
                          <Input value={qrCode} readOnly className="font-mono text-xs" />
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => {
                              navigator.clipboard.writeText(qrCode);
                              toast({
                                title: "Link copiado",
                                description: "O link foi copiado para a área de transferência."
                              });
                            }}
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                      <div>
                        <p className="text-sm font-medium mb-1">ID da sessão:</p>
                        <div className="flex items-center gap-2">
                          <Badge variant="outline" className="font-mono">
                            {sessionId}
                          </Badge>
                          <Button 
                            size="sm" 
                            variant="outline"
                            onClick={() => {
                              navigator.clipboard.writeText(sessionId);
                              toast({
                                title: "ID copiado",
                                description: "O ID da sessão foi copiado para a área de transferência."
                              });
                            }}
                          >
                            <Copy className="h-4 w-4" />
                          </Button>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div className="text-center py-12">
                    <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
                    <h3 className="text-lg font-medium mb-2">QR Code não gerado</h3>
                    <p className="text-muted-foreground mb-4">
                      Ocorreu um erro ao gerar o QR Code para esta sessão.
                    </p>
                    <Button onClick={startNewSession}>
                      Tentar Novamente
                    </Button>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          <div>
            <Card>
              <CardContent className="p-6">
                <h3 className="text-lg font-medium mb-4">Configurações</h3>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <Label htmlFor="max-participants">Número máximo de participantes</Label>
                    <div className="w-32">
                      <Input
                        id="max-participants"
                        type="number"
                        min={1}
                        max={16}
                        value={maxParticipants}
                        onChange={(e) => setMaxParticipants(Number(e.target.value))}
                      />
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <Label htmlFor="h264-preferred">Preferir codec H.264</Label>
                    <Switch 
                      id="h264-preferred" 
                      checked={isH264Preferred} 
                      onCheckedChange={setIsH264Preferred}
                    />
                  </div>
                </div>
              </CardContent>
            </Card>

            <ParticipantGrid 
              participants={participantList}
              onSelectParticipant={handleSelectParticipant}
              onRemoveParticipant={handleRemoveParticipant}
            />
          </div>
        </div>
      )}

      <AlertDialog open={finalActionOpen} onOpenChange={setFinalActionOpen}>
        <AlertDialogContent>
          <AlertDialogHeader>
            <AlertDialogTitle>Sessão encerrada</AlertDialogTitle>
            <AlertDialogDescription>
              A sessão foi encerrada com sucesso. Você será redirecionado para a página inicial em {finalActionTimeLeft} segundos.
            </AlertDialogDescription>
          </AlertDialogHeader>
          <AlertDialogFooter>
            <AlertDialogAction onClick={closeFinalAction}>
              Ir agora
            </AlertDialogAction>
          </AlertDialogFooter>
        </AlertDialogContent>
      </AlertDialog>
    </div>
  );
};

export default TelaoPage;
