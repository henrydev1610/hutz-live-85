import { detectMobile, getCameraPreference } from './deviceDetection';

export const getDeviceSpecificConstraints = (): MediaStreamConstraints[] => {
  const isMobile = detectMobile();
  const cameraPreference = getCameraPreference();
  
  console.log('üì± Getting constraints for:', { isMobile, cameraPreference });
  
  if (isMobile) {
    return getMobileConstraints(cameraPreference);
  } else {
    return getDesktopConstraints();
  }
};

export const getMobileConstraints = (preferredFacing: 'user' | 'environment' = 'user'): MediaStreamConstraints[] => [
  // üéØ Tentativa 1: MOBILE - C√¢mera espec√≠fica com facingMode OBRIGAT√ìRIO
  {
    video: {
      facingMode: { exact: preferredFacing }, // EXACT para for√ßar c√¢mera espec√≠fica
      width: { ideal: 640, max: 1280 },
      height: { ideal: 480, max: 720 },
      frameRate: { ideal: 24, max: 30 }
    },
    audio: {
      echoCancellation: true,
      noiseSuppression: true,
      autoGainControl: true
    }
  },
  // üîÑ Tentativa 2: MOBILE - C√¢mera alternativa com facingMode IDEAL (mais flex√≠vel)
  {
    video: {
      facingMode: { ideal: preferredFacing },
      width: { ideal: 480, max: 800 },
      height: { ideal: 360, max: 600 },
      frameRate: { ideal: 20, max: 30 }
    },
    audio: {
      echoCancellation: true,
      noiseSuppression: true,
      autoGainControl: true
    }
  },
  // üîÑ Tentativa 3: MOBILE - C√¢mera oposta com EXACT
  {
    video: {
      facingMode: { exact: preferredFacing === 'user' ? 'environment' : 'user' },
      width: { ideal: 480, max: 800 },
      height: { ideal: 360, max: 600 }
    },
    audio: {
      echoCancellation: true,
      noiseSuppression: true
    }
  },
  // üì± Tentativa 4: MOBILE - C√¢mera preferida b√°sica sem √°udio
  {
    video: {
      facingMode: { ideal: preferredFacing },
      width: { ideal: 320, max: 640 },
      height: { ideal: 240, max: 480 }
    },
    audio: false
  },
  // Tentativa 5: Qualquer c√¢mera m√≥vel dispon√≠vel
  {
    video: {
      width: { ideal: 320, max: 480 },
      height: { ideal: 240, max: 360 }
    },
    audio: false
  },
  // Tentativa 6: V√≠deo ultra-b√°sico sem especifica√ß√µes
  {
    video: true,
    audio: false
  },
  // Tentativa 7: Apenas √°udio
  {
    video: false,
    audio: true
  }
];

export const getDesktopConstraints = (): MediaStreamConstraints[] => [
  // üñ•Ô∏è Tentativa 1: DESKTOP - Webcam padr√£o SEM facingMode (IMPORTANTE!)
  {
    video: {
      // ‚ùå NUNCA usar facingMode no desktop - causa conflito com mobile
      width: { ideal: 1280, max: 1920 },
      height: { ideal: 720, max: 1080 },
      frameRate: { ideal: 30, max: 60 }
      // ‚úÖ SEM facingMode - usa webcam padr√£o do desktop
    },
    audio: {
      echoCancellation: true,
      noiseSuppression: true,
      autoGainControl: true
    }
  },
  // üñ•Ô∏è Tentativa 2: DESKTOP - Qualidade m√©dia SEM facingMode
  {
    video: {
      width: { ideal: 640, max: 1280 },
      height: { ideal: 480, max: 720 },
      frameRate: { ideal: 24, max: 30 }
      // ‚úÖ SEM facingMode - webcam desktop padr√£o
    },
    audio: {
      echoCancellation: true,
      noiseSuppression: true
    }
  },
  // üñ•Ô∏è Tentativa 3: DESKTOP - B√°sico sem √°udio SEM facingMode
  {
    video: {
      width: { ideal: 480, max: 640 },
      height: { ideal: 360, max: 480 }
      // ‚úÖ SEM facingMode - webcam desktop
    },
    audio: false
  },
  // Tentativa 4: V√≠deo ultra-simples para desktop
  {
    video: {
      width: { ideal: 320 },
      height: { ideal: 240 }
    },
    audio: false
  },
  // Tentativa 5: Qualquer v√≠deo dispon√≠vel
  {
    video: true,
    audio: false
  },
  // Tentativa 6: Apenas √°udio
  {
    video: false,
    audio: true
  }
];